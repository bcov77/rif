# copied largely from boost hana .travis config

language: c++
sudo: false

env:
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true

addons:
  apt:
    packages:
      - g++-6
      - cmake
      - cmake-data
      # - python3.5-dev
      - python2.7
      - python-pip
      - python-numpy
      - python-pandas
    sources: &sources
      - ubuntu-toolchain-r-test
      - kubuntu-backports
      - george-edison55-precise-backports # cmake 3.2.3 / doxygen 1.8.3
      - deadsnakes

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.6.2
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.7.1
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.8.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.59.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.60.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.61.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.62.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.63.0


matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:
    ##########################################################################
    # Check for code formatting errors
    ##########################################################################
    - os: linux
      dist: trusty
      env: UNIT_TESTS=true

    # - os: osx
      # env: CHECK_FORMATTING=true
      # osx_image: xcode8

    - os: linux
      env: UNIT_TESTS=true LLVM_VERSION=3.5.2
      compiler: clang
    - os: linux
      env: UNIT_TESTS=true LLVM_VERSION=3.6.2
      compiler: clang
    # - os: linux
      # env: UNIT_TESTS=true LLVM_VERSION=3.7.1
      # compiler: clang
    # # Clang 3.8
    # - os: linux
    #   env: UNIT_TESTS=true LLVM_VERSION=3.8.0
    #   compiler: clang
    # # Clang 3.9
    # - os: linux
    #   env: UNIT_TESTS=true LLVM_VERSION=3.9.0
    #   compiler: clang
    - os: linux
      env: UNIT_TESTS=true COMPILER=g++-6
      compiler: gcc

    # Xcode 6.4
    # - os: osx
    #   env: UNIT_TESTS=true
    #   osx_image: xcode6.4
    # - os: osx
    #   env: UNIT_TESTS=true
    #   osx_image: xcode7.3
    - os: osx
      env: UNIT_TESTS=true
      osx_image: xcode8

    # With Boost 1.59
    - os: linux
      env: UNIT_TESTS=true  BOOST_VERSION=1.59.0
      compiler: clang
#    - os: linux
#      env: UNIT_TESTS=true  BOOST_VERSION=1.60.0
#      compiler: clang
#    - os: linux
#      env: UNIT_TESTS=true  BOOST_VERSION=1.61.0
#      compiler: clang
#    - os: linux
#      env: UNIT_TESTS=true  BOOST_VERSION=1.62.0
#      compiler: clang
    # Generate the documentation
    # - os: linux
    #   env: DOCUMENTATION=true
    #   compiler: clang
    # - os: osx
    #   env: DOCUMENTATION=true
    #   compiler: clang

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ ! "${LLVM_VERSION}" ]]; then LLVM_VERSION=3.9.0; fi
  - if [[ ! "${BOOST_VERSION}" ]]; then BOOST_VERSION=1.63.0; fi

  - if [[ "${COMPILER}" ]]; then export CXX=${COMPILER}; fi

  ############################################################################
  # Install Boost headers
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        if [[ "${BOOST_VERSION}" == "trunk" ]]; then
          BOOST_URL="http://github.com/boostorg/boost.git"
          travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL} ${BOOST_DIR} || exit 1
          (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers)
        else
          BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
          mkdir -p ${BOOST_DIR}
          { travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        fi
        # Make sure we don't conflict with the Hana shipped with Boost
        rm -rf ${BOOST_ROOT}/include/boost/{hana,hana.hpp}
      fi
      echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
      echo BOOST_DIR: ${BOOST_DIR}
      ls ${BOOST_DIR}
      echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
      export CMAKE_OPTIONS=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [ "$TRAVIS_OS_NAME" = 'osx' ]; then
      brew install cmake
      brew upgrade cmake
      export PATH=${PATH}:/Users/travis/Library/Python/2.7/bin
    else
      echo "not on osx or linux???"
    fi
  - cmake --version

  ############################################################################
  # Install Boost.Build
  ############################################################################
  - |
    if [[ "${BOOST_BUILD}" == "true" ]]; then
      (cd ${BOOST_DIR}/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
      export PATH=${DEPS_DIR}/b2/bin:${PATH}
    fi

  ############################################################################
  # Install Boost iostreams and system
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 -d0 --prefix=./ --shared --with-system --with-iostreams install)
    fi

  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"

        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi

      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - ${CXX} --version

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
      doxygen --version
    fi

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt

  ############################################################################
  # Install tools to check for code formatting errors (run on OS X only)
  ############################################################################
  - if [[ "${CHECK_FORMATTING}" == "true" ]]; then brew install pcre vera++; fi

  - |
    cd ${TRAVIS_BUILD_DIR}
    pip install --user sphinx numpy pandas future jinja2 pytest pytest-cov pytest-xdist hypothesis enum34 codecov
    (cd external/hacked_packages/pytest-cpp-0.4 && pip install --user . && cd ../..)

before_script:
  - cd ${TRAVIS_BUILD_DIR}


script:
    ############################################################################
  # Check for common formatting errors.
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      # Find non-ASCII characters in headers
      hpps=$(find include doc -name \*\.hpp)
      cpps=$(find test example -name \*\.cpp)
      pcregrep --color='auto' -n "[\x80-\xFF]" ${hpps} ${cpps}
      if [[ $? -ne 1 ]]; then exit 1; fi

      # F001: Source files should not use the '\r' (CR) character
      # L001: No trailing whitespace at the end of lines
      # L002: Don't use tab characters
      find include -name \*\.hpp | vera++ --rule F001 --rule L001 --rule L002 --error
    elif [[ "${UNIT_TESTS}" == "true" ]]; then
      pwd
      ls tools
      python tools/cmake_build_and_run_pytest.py && codecov
      # todo should codecov go here?
    elif [[ "${DOCUMENTATION}" == "true" ]]; then
      cd docs
      make html
    fi

